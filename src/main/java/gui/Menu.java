/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import com.mycompany.crud.Administrativo;
import com.mycompany.crud.Aluno;
import com.mycompany.crud.Coordenador;
import com.mycompany.crud.Curso;
import com.mycompany.crud.Diretor;
import com.mycompany.crud.Disciplinas;
import com.mycompany.crud.Faculdade;
import static com.mycompany.crud.Faculdade.cursos;
import com.mycompany.crud.Funcionario;
import com.mycompany.crud.Informatica;
import com.mycompany.crud.Limpeza;
import com.mycompany.crud.Professor;
import javax.swing.table.DefaultTableModel;

//Dependencias....
import java.awt.BorderLayout;
import java.awt.Choice;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
/**
 *
 * @author Marcos Carvalho
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectCargo = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        internalCursos = new javax.swing.JInternalFrame();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaCursos = new javax.swing.JTable();
        delCurs = new javax.swing.JButton();
        txtNomeCursAtt = new javax.swing.JTextField();
        txtMensalidadeAtt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        addCurs = new javax.swing.JButton();
        attCurs = new javax.swing.JButton();
        internalDisciplinas = new javax.swing.JInternalFrame();
        jLabel9 = new javax.swing.JLabel();
        ScrollDisc = new javax.swing.JScrollPane();
        tabelaDisc = new javax.swing.JTable();
        txtNomeDisc = new javax.swing.JTextField();
        txtSalaDisc = new javax.swing.JTextField();
        txtHorarioDisc = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        addDisc = new javax.swing.JButton();
        attDisc = new javax.swing.JButton();
        delDisc = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        ExibirCursos = new javax.swing.JScrollPane();
        tabelaExibirCursos = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        internalAlunos = new javax.swing.JInternalFrame();
        jLabel10 = new javax.swing.JLabel();
        ScrollDisc1 = new javax.swing.JScrollPane();
        tabelaAlunos = new javax.swing.JTable();
        txtNomeAluno = new javax.swing.JTextField();
        txtMatriculaAluno = new javax.swing.JTextField();
        txtCpfAluno = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        addAlunos = new javax.swing.JButton();
        attAlunos = new javax.swing.JButton();
        delAlunos = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        ExibirCursos1 = new javax.swing.JScrollPane();
        tabelaExibirCursosEmAlunos = new javax.swing.JTable();
        txtIdadeAluno = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        ExibirCursos2 = new javax.swing.JScrollPane();
        tabelaExibirDisciplinas = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        internalFuncionarios = new javax.swing.JInternalFrame();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaFuncionarios = new javax.swing.JTable();
        delFunc = new javax.swing.JButton();
        txtNomeFunc = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        addFunc = new javax.swing.JButton();
        attFunc = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        txtCpfFunc = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtIdadeFunc = new javax.swing.JTextField();
        txtSalarioFunc = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        radProf = new javax.swing.JRadioButton();
        radDiretor = new javax.swing.JRadioButton();
        radCoordenador = new javax.swing.JRadioButton();
        radLimpeza = new javax.swing.JRadioButton();
        radTI = new javax.swing.JRadioButton();
        radAdm = new javax.swing.JRadioButton();
        jLabel26 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuSair = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuTutorial = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menuInfos = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(917, 560));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("C.R.U.D.");

        jLabel2.setText("Sistema de gerenciamento SAS");

        jLabel3.setText("Escolha o que deseja modificar:");

        internalCursos.setVisible(true);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Modificar Cursos");

        tabelaCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nome", "Mensalidade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaCursos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaCursosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaCursos);

        delCurs.setText("Deletar");
        delCurs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delCursMouseClicked(evt);
            }
        });
        delCurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delCursActionPerformed(evt);
            }
        });

        txtMensalidadeAtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMensalidadeAttActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Mensalidade:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Nome :");

        addCurs.setText("Adicionar");
        addCurs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addCursMouseClicked(evt);
            }
        });

        attCurs.setText("Atualizar");
        attCurs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                attCursMouseClicked(evt);
            }
        });
        attCurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attCursActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout internalCursosLayout = new javax.swing.GroupLayout(internalCursos.getContentPane());
        internalCursos.getContentPane().setLayout(internalCursosLayout);
        internalCursosLayout.setHorizontalGroup(
            internalCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(internalCursosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(internalCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE)
                    .addGroup(internalCursosLayout.createSequentialGroup()
                        .addGroup(internalCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, internalCursosLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNomeCursAtt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMensalidadeAtt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, internalCursosLayout.createSequentialGroup()
                                .addComponent(addCurs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(attCurs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(delCurs)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(internalCursosLayout.createSequentialGroup()
                .addGap(334, 334, 334)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        internalCursosLayout.setVerticalGroup(
            internalCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(internalCursosLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(12, 12, 12)
                .addGroup(internalCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCurs)
                    .addComponent(delCurs)
                    .addComponent(attCurs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(internalCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomeCursAtt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMensalidadeAtt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cursos", internalCursos);

        internalDisciplinas.setVisible(true);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Modificar Disciplinas");

        tabelaDisc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Sala", "Horario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollDisc.setViewportView(tabelaDisc);
        if (tabelaDisc.getColumnModel().getColumnCount() > 0) {
            tabelaDisc.getColumnModel().getColumn(2).setHeaderValue("Horario");
        }

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Sala :");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Nome :");

        addDisc.setText("Adicionar");
        addDisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDiscActionPerformed(evt);
            }
        });

        attDisc.setText("Atualizar");
        attDisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attDiscActionPerformed(evt);
            }
        });

        delDisc.setText("Deletar");
        delDisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delDiscActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("Horário : ");

        tabelaExibirCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Curso"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaExibirCursos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaExibirCursosMouseClicked(evt);
            }
        });
        ExibirCursos.setViewportView(tabelaExibirCursos);

        jLabel15.setText("Selecione um curso para editar suas disciplinas.");

        javax.swing.GroupLayout internalDisciplinasLayout = new javax.swing.GroupLayout(internalDisciplinas.getContentPane());
        internalDisciplinas.getContentPane().setLayout(internalDisciplinasLayout);
        internalDisciplinasLayout.setHorizontalGroup(
            internalDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(internalDisciplinasLayout.createSequentialGroup()
                .addGroup(internalDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(internalDisciplinasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ScrollDisc, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(ExibirCursos, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(internalDisciplinasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(internalDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(internalDisciplinasLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNomeDisc, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(internalDisciplinasLayout.createSequentialGroup()
                                .addComponent(addDisc)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(attDisc)))
                        .addGap(13, 13, 13)
                        .addGroup(internalDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(internalDisciplinasLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSalaDisc, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtHorarioDisc, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(internalDisciplinasLayout.createSequentialGroup()
                                .addComponent(delDisc)
                                .addGap(126, 126, 126)
                                .addComponent(jLabel15)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(internalDisciplinasLayout.createSequentialGroup()
                .addGap(330, 330, 330)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        internalDisciplinasLayout.setVerticalGroup(
            internalDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, internalDisciplinasLayout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(internalDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, internalDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delDisc)
                        .addComponent(attDisc)
                        .addComponent(jLabel15))
                    .addComponent(addDisc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(internalDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomeDisc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSalaDisc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHorarioDisc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(internalDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollDisc, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addComponent(ExibirCursos, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Disciplinas", internalDisciplinas);

        internalAlunos.setVisible(true);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Modificar Alunos");

        tabelaAlunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Matricula", "CPF", "Idade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollDisc1.setViewportView(tabelaAlunos);

        txtCpfAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCpfAlunoActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setText("Matricula :");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel17.setText("Nome      :");

        addAlunos.setText("Adicionar");
        addAlunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAlunosActionPerformed(evt);
            }
        });

        attAlunos.setText("Atualizar");
        attAlunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attAlunosActionPerformed(evt);
            }
        });

        delAlunos.setText("Deletar");
        delAlunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delAlunosActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel18.setText("CPF : ");

        tabelaExibirCursosEmAlunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Curso"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaExibirCursosEmAlunos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaExibirCursosEmAlunosMouseClicked(evt);
            }
        });
        ExibirCursos1.setViewportView(tabelaExibirCursosEmAlunos);

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel19.setText("Idade :");

        tabelaExibirDisciplinas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Disciplinas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaExibirDisciplinas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaExibirDisciplinasMouseClicked(evt);
            }
        });
        ExibirCursos2.setViewportView(tabelaExibirDisciplinas);

        jLabel20.setText("Selecione um curso e uma disciplina para editar alunos.");

        javax.swing.GroupLayout internalAlunosLayout = new javax.swing.GroupLayout(internalAlunos.getContentPane());
        internalAlunos.getContentPane().setLayout(internalAlunosLayout);
        internalAlunosLayout.setHorizontalGroup(
            internalAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(internalAlunosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(internalAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, internalAlunosLayout.createSequentialGroup()
                        .addGroup(internalAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(internalAlunosLayout.createSequentialGroup()
                                .addComponent(addAlunos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(attAlunos)
                                .addGap(13, 13, 13)
                                .addComponent(delAlunos)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(internalAlunosLayout.createSequentialGroup()
                                .addComponent(ScrollDisc1)
                                .addGap(18, 18, 18)
                                .addComponent(ExibirCursos2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addComponent(ExibirCursos1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, internalAlunosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel20)
                        .addGap(216, 216, 216))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, internalAlunosLayout.createSequentialGroup()
                        .addGroup(internalAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(internalAlunosLayout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNomeAluno))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, internalAlunosLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMatriculaAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCpfAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addComponent(txtIdadeAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(199, 199, 199))))
            .addGroup(internalAlunosLayout.createSequentialGroup()
                .addGap(332, 332, 332)
                .addComponent(jLabel10)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        internalAlunosLayout.setVerticalGroup(
            internalAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, internalAlunosLayout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(internalAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, internalAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delAlunos)
                        .addComponent(attAlunos)
                        .addComponent(jLabel20))
                    .addComponent(addAlunos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(internalAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomeAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(internalAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMatriculaAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCpfAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdadeAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(internalAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ExibirCursos1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(ScrollDisc1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(ExibirCursos2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Alunos", internalAlunos);

        internalFuncionarios.setVisible(true);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Modificar Funcionários");

        tabelaFuncionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nome", "CPF", "Idade", "Cargo", "Salario", "Bonus"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaFuncionarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaFuncionariosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaFuncionarios);

        delFunc.setText("Deletar");
        delFunc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delFuncMouseClicked(evt);
            }
        });
        delFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delFuncActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel21.setText("Nome :");

        addFunc.setText("Adicionar");
        addFunc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addFuncMouseClicked(evt);
            }
        });
        addFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFuncActionPerformed(evt);
            }
        });

        attFunc.setText("Atualizar");
        attFunc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                attFuncMouseClicked(evt);
            }
        });
        attFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attFuncActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel22.setText("CPF :");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel23.setText("Idade :");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel25.setText("Salario :");

        selectCargo.add(radProf);
        radProf.setSelected(true);
        radProf.setText("Professor");
        radProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radProfActionPerformed(evt);
            }
        });

        selectCargo.add(radDiretor);
        radDiretor.setText("Diretor");
        radDiretor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radDiretorActionPerformed(evt);
            }
        });

        selectCargo.add(radCoordenador);
        radCoordenador.setText("Coordenador");
        radCoordenador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radCoordenadorActionPerformed(evt);
            }
        });

        selectCargo.add(radLimpeza);
        radLimpeza.setText("Limpeza");
        radLimpeza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radLimpezaActionPerformed(evt);
            }
        });

        selectCargo.add(radTI);
        radTI.setText("T. I.");
        radTI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radTIActionPerformed(evt);
            }
        });

        selectCargo.add(radAdm);
        radAdm.setText("Administrativo");
        radAdm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radAdmActionPerformed(evt);
            }
        });

        jLabel26.setText("Selecione um Cargo : ");

        javax.swing.GroupLayout internalFuncionariosLayout = new javax.swing.GroupLayout(internalFuncionarios.getContentPane());
        internalFuncionarios.getContentPane().setLayout(internalFuncionariosLayout);
        internalFuncionariosLayout.setHorizontalGroup(
            internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(internalFuncionariosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(internalFuncionariosLayout.createSequentialGroup()
                            .addGroup(internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel21)
                                .addComponent(jLabel22))
                            .addGap(18, 18, 18)
                            .addGroup(internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(internalFuncionariosLayout.createSequentialGroup()
                                    .addComponent(txtCpfFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(88, 88, 88)
                                    .addComponent(jLabel23)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtIdadeFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel25)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtSalarioFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtNomeFunc)))
                        .addComponent(jScrollPane2))
                    .addGroup(internalFuncionariosLayout.createSequentialGroup()
                        .addComponent(addFunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(attFunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delFunc)
                        .addGap(497, 497, 497)))
                .addGroup(internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(internalFuncionariosLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radDiretor)
                            .addComponent(radCoordenador)
                            .addComponent(radLimpeza)
                            .addComponent(radTI)
                            .addComponent(radAdm)
                            .addComponent(radProf)))
                    .addGroup(internalFuncionariosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
            .addGroup(internalFuncionariosLayout.createSequentialGroup()
                .addGap(319, 319, 319)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        internalFuncionariosLayout.setVerticalGroup(
            internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(internalFuncionariosLayout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addFunc)
                    .addComponent(delFunc)
                    .addComponent(attFunc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomeFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(internalFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCpfFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdadeFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSalarioFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118))
            .addGroup(internalFuncionariosLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radProf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radDiretor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radCoordenador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radLimpeza)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radTI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radAdm)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Funcionários", internalFuncionarios);

        jMenu1.setText("Arquivo");

        menuSair.setText("Sair");
        menuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSairActionPerformed(evt);
            }
        });
        jMenu1.add(menuSair);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ajuda");

        menuTutorial.setText("Tutorial");
        menuTutorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuTutorialActionPerformed(evt);
            }
        });
        jMenu2.add(menuTutorial);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Sobre");

        menuInfos.setText("Informações dos devs");
        menuInfos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInfosActionPerformed(evt);
            }
        });
        jMenu3.add(menuInfos);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(0, 745, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(336, 336, 336)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(393, 393, 393)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    //Objetos;;
    Faculdade fac = new Faculdade();
    
    
    
    //Variaveis
    String cursoEscolhidoTest ;
    
    String disciplinaEscolhidaTest ;
    
    String cargoSelecionado = "Professor";
    
    public ArrayList<Funcionario> funcionarios = new ArrayList<>();
    
    DecimalFormat formatador = new DecimalFormat("0.00");
    
    public void addFunc(String nome, String cpf, String idade, double salario){
    //Adicionar funcionarios de acordo com seus respectivo objeto na lista 

    
    switch (cargoSelecionado){
        case "TI":
            funcionarios.add(new Informatica(nome, cpf, idade, cargoSelecionado, salario){
        //PEgar o bonus e transformar em string
        double bonus;
        @Override
        public double bonusSalario(double salario) {
            bonus = salario*0.20;
            return bonus;
        }

    });
            break;
        case "ADM":
            funcionarios.add(new Administrativo(nome, cpf, idade, cargoSelecionado, salario){
        //PEgar o bonus e transformar em string
        double bonus;
        @Override
        public double bonusSalario(double salario) {
            bonus = salario*0.18;
            return bonus;
        }

    });
            break;
        case "Diretor":
            funcionarios.add(new Diretor(nome, cpf, idade, cargoSelecionado, salario){
        //PEgar o bonus e transformar em string
        double bonus;
        @Override
        public double bonusSalario(double salario) {
            bonus = salario*0.25;
            return bonus;
        }

    });
            break;
        case "Professor":
            funcionarios.add(new Professor(nome, cpf, idade, cargoSelecionado, salario){
        //PEgar o bonus e transformar em string
        double bonus;
        @Override
        public double bonusSalario(double salario) {
            bonus = salario*0.21;
            return bonus;
        }

    });
            break;
        case "Coordenador":
            funcionarios.add(new Coordenador(nome, cpf, idade, cargoSelecionado, salario){
        //PEgar o bonus e transformar em string
        double bonus;
        @Override
        public double bonusSalario(double salario) {
            bonus = salario*0.30;
            return bonus;
        }

    });
            break;
        case "Limpeza":
            funcionarios.add(new Limpeza(nome, cpf, idade, cargoSelecionado, salario) {
        //PEgar o bonus e transformar em string
        double bonus;
        @Override
        public double bonusSalario(double salario) {
            bonus = salario*0.10;
            return bonus;
        }

    });
            
            break;
    }
    
    }
    //Botoes...
    
   //Consultar e deletar cursos
    private void delCursMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delCursMouseClicked
        int pos = tabelaCursos.getSelectedRow();
        cursos.remove(pos);
        
        //Atualizador da tabela cursos
        DefaultTableModel modelo = (DefaultTableModel) tabelaCursos.getModel();
        modelo.setNumRows(0);
        //Atualizador da tabela de cursos na aba disciplinas
        DefaultTableModel modelo1 = (DefaultTableModel) tabelaExibirCursos.getModel();
        modelo1.setNumRows(0);
        //Atualizar a tabela de cursos na ABA alunos
        DefaultTableModel modeloAlunos = (DefaultTableModel) tabelaExibirCursosEmAlunos.getModel();
        modeloAlunos.setNumRows(0);
        for(Curso c : cursos){
            modelo.addRow(new Object[]{c.getNomeCurs(), c.getMensalidade()});
            //tabela de disciplinas
            modelo1.addRow(new Object[]{c.getNomeCurs()});
            //tabela de cursos em Alunos
            modeloAlunos.addRow(new Object[]{c.getNomeCurs()});
        }
        
    }//GEN-LAST:event_delCursMouseClicked
    
    private void txtMensalidadeAttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMensalidadeAttActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMensalidadeAttActionPerformed

    //adicionar cursos,..... PRINCIPAL
    private void addCursMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCursMouseClicked
           
        try{ 
        String nome = txtNomeCursAtt.getText();
        double mensalidade = Double.parseDouble(txtMensalidadeAtt.getText());
       
        fac.addCurso(nome, mensalidade);
        //Atualizador da tabela cursos
        DefaultTableModel modelo = (DefaultTableModel) tabelaCursos.getModel();
        modelo.setNumRows(0);
        //Atualizador da tabela de cursos na aba disciplinas
        DefaultTableModel modelo1 = (DefaultTableModel) tabelaExibirCursos.getModel();
        modelo1.setNumRows(0);
        //Atualizar a tabela de cursos na ABA alunos
        DefaultTableModel modeloAlunos = (DefaultTableModel) tabelaExibirCursosEmAlunos.getModel();
        modeloAlunos.setNumRows(0);
        for(Curso c : cursos){
            modelo.addRow(new Object[]{c.getNomeCurs(), c.getMensalidade()});
            //tabela de disciplinas
            modelo1.addRow(new Object[]{c.getNomeCurs()});
            //tabela de cursos em Alunos
            modeloAlunos.addRow(new Object[]{c.getNomeCurs()});
        }
        
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "No campo Mensalidade são permitidos somente numeros inteiros!");
                }
        ///
    }//GEN-LAST:event_addCursMouseClicked
   
    private void delCursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delCursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_delCursActionPerformed
    //Atualizar curso
    private void attCursMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attCursMouseClicked
        int pos = tabelaCursos.getSelectedRow();
        
        try{
        cursos.get(pos).setNomeCurs(txtNomeCursAtt.getText());
        cursos.get(pos).setMensalidade(Double.parseDouble(txtMensalidadeAtt.getText()));
        
        //Atualizador da tabela cursos
        DefaultTableModel modelo = (DefaultTableModel) tabelaCursos.getModel();
        modelo.setNumRows(0);
        //Atualizador da tabela de cursos na aba disciplinas
        DefaultTableModel modelo1 = (DefaultTableModel) tabelaExibirCursos.getModel();
        modelo1.setNumRows(0);
        //Atualizar a tabela de cursos na ABA alunos
        DefaultTableModel modeloAlunos = (DefaultTableModel) tabelaExibirCursosEmAlunos.getModel();
        modeloAlunos.setNumRows(0);
        for(Curso c : cursos){
            modelo.addRow(new Object[]{c.getNomeCurs(), c.getMensalidade()});
            //tabela de disciplinas
            modelo1.addRow(new Object[]{c.getNomeCurs()});
            //tabela de cursos em Alunos
            modeloAlunos.addRow(new Object[]{c.getNomeCurs()});
        }
        
        }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "No campo Mensalidade são permitidos somente numeros inteiros!");
                }
        
    }//GEN-LAST:event_attCursMouseClicked
    //pegar os valores dos cursos ao clicar na tabela
    private void tabelaCursosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaCursosMouseClicked
        int pos = tabelaCursos.getSelectedRow();
        txtNomeCursAtt.setText(tabelaCursos.getValueAt(pos, 0).toString());
        txtMensalidadeAtt.setText(tabelaCursos.getValueAt(pos, 1).toString());
    }//GEN-LAST:event_tabelaCursosMouseClicked

       //ADICIONAR DISCIPLINAS DE ACORDO COM O CURSO ESCOLHIDO....
    
    private void addDiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDiscActionPerformed
        
        
        //Para cada objeto do tipo CURSO dentro da lista cursos
        for(Curso cs : cursos){
            
            String s = cs.getNomeCurs();
            
            //System.out.print(s + cs);
            if(s.equals(cursoEscolhidoTest)){
                try{
            String nome = txtNomeDisc.getText();
            int sala = Integer.parseInt(txtSalaDisc.getText());
            double hoario = Double.parseDouble(txtHorarioDisc.getText());
        
            cs.addDisc(nome, sala, hoario);
            
            
            DefaultTableModel modelo = (DefaultTableModel) tabelaDisc.getModel();
            modelo.setNumRows(0);
                //MOstrar um objeto dentro de um arraylist de outro objeto....
                for(Disciplinas d : cs.disciplinas){
                    //mostrar a disciplina
                    
                    modelo.addRow(new Object[]{d.getNomeDisc(), d.getSala(), d.getHorario()});                     
                }
                //
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "Nos campos SALA e HORÁRIO são permitidos somente numeros inteiros!");
                }
            }
        }
        
    }//GEN-LAST:event_addDiscActionPerformed
    //Selecionar cursos para add disciplinas
    private void tabelaExibirCursosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaExibirCursosMouseClicked
        int pos = tabelaExibirCursos.getSelectedRow();
        
        cursoEscolhidoTest = tabelaExibirCursos.getValueAt(pos, 0).toString();
        
        //Exibição da disciplina de acordo com o curso...
         for(Curso cs : cursos){
            String s = cs.getNomeCurs();
           
            if(s.equals(cursoEscolhidoTest)){
            DefaultTableModel modelo = (DefaultTableModel) tabelaDisc.getModel();
            modelo.setNumRows(0);
                
                for(Disciplinas d : cs.disciplinas){
                    //mostrar a disciplina
                    
                    modelo.addRow(new Object[]{d.getNomeDisc(), d.getSala(), d.getHorario()});                     
                }      
            }
         }
        
    }//GEN-LAST:event_tabelaExibirCursosMouseClicked
    //Adicionar os alunos......
    private void addAlunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAlunosActionPerformed
        //Para cada objeto do tipo CURSO dentro da lista cursos
           
        for(Curso cs : cursos){
            String s = cs.getNomeCurs();
           
            if(s.equals(cursoEscolhidoTest)){
                
                for(Disciplinas d : cs.disciplinas){
                    //mostrar a disciplina
                    
                    //teste de disciplinas
                    String dc = d.getNomeDisc();
                    
                    if(dc.equals(disciplinaEscolhidaTest)){
                        try{
                     String nome = txtNomeAluno.getText();
                     double matricula = Double.parseDouble(txtMatriculaAluno.getText());
                     double cpf = Double.parseDouble(txtCpfAluno.getText());
                     double idade = Double.parseDouble(txtIdadeAluno.getText());
                     
                     
                     d.addAluno(nome, matricula, cpf, idade);
                     }catch(NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "Nos campos: MATRÍCULA, CPF e IDADE são permitidos somente numeros inteiros!");
                        }
                    //se for exatamente a disciplina que a gente quer...
                    //Então vamos pro ultimo for, o de exibir os alunos..
                        DefaultTableModel modelo = (DefaultTableModel) tabelaAlunos.getModel();
                        modelo.setNumRows(0);
                        for(Aluno a : d.getAlunos()){
                            //listar alunos
                            modelo.addRow(new Object[]{a.getNome(), a.getMatricula(), a.getCpf(), a.getIdade()});  
                            
                        }
                        
                    
                    }
                                       
                }      
            }
         }
            

    }//GEN-LAST:event_addAlunosActionPerformed

    private void tabelaExibirCursosEmAlunosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaExibirCursosEmAlunosMouseClicked
        //Na aba alunos, essa tabela deve alterar a exibição da tabela disciplinas 
        //de acordo com o item curso selecionado...
        int pos = tabelaExibirCursosEmAlunos.getSelectedRow();
        
        cursoEscolhidoTest = tabelaExibirCursosEmAlunos.getValueAt(pos, 0).toString();
        
        //Exibição da disciplina de acordo com o curso...
         for(Curso cs : cursos){
            String s = cs.getNomeCurs();
           
            if(s.equals(cursoEscolhidoTest)){
            DefaultTableModel modelo = (DefaultTableModel) tabelaExibirDisciplinas.getModel();
            modelo.setNumRows(0);
                
                for(Disciplinas d : cs.disciplinas){
                    //mostrar a disciplina
                    
                    modelo.addRow(new Object[]{d.getNomeDisc()});                     
                }      
            }
         }
        
    }//GEN-LAST:event_tabelaExibirCursosEmAlunosMouseClicked
       
    //Deletar disciplinas...
    private void delDiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delDiscActionPerformed
        
        int pos = tabelaDisc.getSelectedRow();
        
        
        
        //Exibição da disciplina de acordo com o curso...
         for(Curso cs : cursos){
            String s = cs.getNomeCurs();
           
            if(s.equals(cursoEscolhidoTest)){
                
            cs.disciplinas.remove(pos);
            
            DefaultTableModel modelo = (DefaultTableModel) tabelaDisc.getModel();
            modelo.setNumRows(0);
                
                for(Disciplinas d : cs.disciplinas){
                    //mostrar a disciplina
                    
                    modelo.addRow(new Object[]{d.getNomeDisc(), d.getSala(), d.getHorario()});                     
                }      
            }
         }
        
    }//GEN-LAST:event_delDiscActionPerformed
    //Atualizar disciplinas
    private void attDiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attDiscActionPerformed
        int pos = tabelaDisc.getSelectedRow();
        
        
        
        //Exibição da disciplina de acordo com o curso...
         for(Curso cs : cursos){
            String s = cs.getNomeCurs();
           
            if(s.equals(cursoEscolhidoTest)){
                try{
            cs.disciplinas.get(pos).setNomeDisc(txtNomeDisc.getText());
            cs.disciplinas.get(pos).setSala(Integer.parseInt(txtSalaDisc.getText()));
            cs.disciplinas.get(pos).setHorario(Double.parseDouble(txtHorarioDisc.getText()));
            
            DefaultTableModel modelo = (DefaultTableModel) tabelaDisc.getModel();
            modelo.setNumRows(0);
                
                for(Disciplinas d : cs.disciplinas){
                    //mostrar a disciplina
                    
                    modelo.addRow(new Object[]{d.getNomeDisc(), d.getSala(), d.getHorario()});                     
                }    
                
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "Nos campos SALA e HORÁRIO são permitidos somente numeros inteiros!");
                }
            }
         }
         
    }//GEN-LAST:event_attDiscActionPerformed

    private void attCursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attCursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attCursActionPerformed

    private void txtCpfAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCpfAlunoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCpfAlunoActionPerformed

    private void tabelaExibirDisciplinasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaExibirDisciplinasMouseClicked
    //Alterar a exibição ALUNOS        
    //Essa tabela vai alterar a exibição da tabela alunos de acordo com seu item selecionado
        int pos = tabelaExibirDisciplinas.getSelectedRow();
        
        disciplinaEscolhidaTest = tabelaExibirDisciplinas.getValueAt(pos, 0).toString();
        
        //Exibição da disciplina de acordo com o curso...
         for(Curso cs : cursos){
            String s = cs.getNomeCurs();
           
            if(s.equals(cursoEscolhidoTest)){
                
                for(Disciplinas d : cs.disciplinas){
                    //mostrar a disciplina
                    
                    //teste de disciplinas
                    String dc = d.getNomeDisc();
                    
                    if(dc.equals(disciplinaEscolhidaTest)){
                    //se for exatamente a disciplina que a gente quer...
                    //Então vamos pro ultimo for, o de exibir os alunos..
                        DefaultTableModel modelo = (DefaultTableModel) tabelaAlunos.getModel();
                        modelo.setNumRows(0);
                        for(Aluno a : d.getAlunos()){
                            //listar alunos
                            modelo.addRow(new Object[]{a.getNome(), a.getMatricula(), a.getCpf(), a.getIdade()});  
                            
                        }
                    
                    
                    }
                                       
                }      
            }
         }
    }//GEN-LAST:event_tabelaExibirDisciplinasMouseClicked

    private void delAlunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delAlunosActionPerformed
       //Deletar alunos.....
       int pos = tabelaAlunos.getSelectedRow();
       
       for(Curso cs : cursos){
            String s = cs.getNomeCurs();
           
            if(s.equals(cursoEscolhidoTest)){
                
                for(Disciplinas d : cs.disciplinas){
                    //mostrar a disciplina
                    
                    //teste de disciplinas
                    String dc = d.getNomeDisc();
                    
                    if(dc.equals(disciplinaEscolhidaTest)){
                     
                    //remover aluno
                    d.getAlunos().remove(pos);
                    
                    //se for exatamente a disciplina que a gente quer...
                    //Então vamos pro ultimo for, o de exibir os alunos..
                        DefaultTableModel modelo = (DefaultTableModel) tabelaAlunos.getModel();
                        modelo.setNumRows(0);
                        for(Aluno a : d.getAlunos()){
                            //listar alunos
                            modelo.addRow(new Object[]{a.getNome(), a.getMatricula(), a.getCpf(), a.getIdade()});  
                            
                        }
                    
                    
                    }
                                       
                }      
            }
         }
       
    }//GEN-LAST:event_delAlunosActionPerformed

    private void attAlunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attAlunosActionPerformed
        
        //Atualizar alunos
        int pos = tabelaAlunos.getSelectedRow();
        
        disciplinaEscolhidaTest = tabelaExibirDisciplinas.getValueAt(pos, 0).toString();
        
        //Exibição da disciplina de acordo com o curso...
         for(Curso cs : cursos){
            String s = cs.getNomeCurs();
           
            if(s.equals(cursoEscolhidoTest)){
                
                for(Disciplinas d : cs.disciplinas){
                    //mostrar a disciplina
                    
                    //teste de disciplinas
                    String dc = d.getNomeDisc();
                    
                    if(dc.equals(disciplinaEscolhidaTest)){
                    try{
                    d.getAlunos().get(pos).setNome(txtNomeAluno.getText());
                    d.getAlunos().get(pos).setMatricula(Double.parseDouble(txtMatriculaAluno.getText()));
                    d.getAlunos().get(pos).setCpf(Double.parseDouble(txtCpfAluno.getText()));
                    d.getAlunos().get(pos).setIdade(Double.parseDouble(txtIdadeAluno.getText()));
                    
                    //se for exatamente a disciplina que a gente quer...
                    //Então vamos pro ultimo for, o de exibir os alunos..
                        DefaultTableModel modelo = (DefaultTableModel) tabelaAlunos.getModel();
                        modelo.setNumRows(0);
                        for(Aluno a : d.getAlunos()){
                            //listar alunos
                            modelo.addRow(new Object[]{a.getNome(), a.getMatricula(), a.getCpf(), a.getIdade()});  
                            
                        }
                    }catch(NumberFormatException e){
                        JOptionPane.showMessageDialog(null, "Nos campos: MATRICULA, CPF e IDADE são permitidos somente numeros inteiros!");
                    }
                    
                    }
                                       
                }      
            }
         }
    }//GEN-LAST:event_attAlunosActionPerformed

    private void tabelaFuncionariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaFuncionariosMouseClicked
        int pos = tabelaFuncionarios.getSelectedRow();
        txtNomeFunc.setText(tabelaFuncionarios.getValueAt(pos, 0).toString());
        txtCpfFunc.setText(tabelaFuncionarios.getValueAt(pos, 1).toString());
        txtIdadeFunc.setText(tabelaFuncionarios.getValueAt(pos, 2).toString());
        txtSalarioFunc.setText(tabelaFuncionarios.getValueAt(pos, 4).toString());
    }//GEN-LAST:event_tabelaFuncionariosMouseClicked

    private void delFuncMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delFuncMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_delFuncMouseClicked

    private void addFuncMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addFuncMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addFuncMouseClicked

    private void attFuncMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attFuncMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_attFuncMouseClicked

    private void radTIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radTIActionPerformed
        cargoSelecionado = "TI";
    }//GEN-LAST:event_radTIActionPerformed

    private void radAdmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radAdmActionPerformed
        cargoSelecionado = "Adm";
    }//GEN-LAST:event_radAdmActionPerformed

    private void radDiretorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radDiretorActionPerformed
        cargoSelecionado = "Diretor";
    }//GEN-LAST:event_radDiretorActionPerformed

    private void radProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radProfActionPerformed
        cargoSelecionado = "Professor";
    }//GEN-LAST:event_radProfActionPerformed

    private void radCoordenadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radCoordenadorActionPerformed
        cargoSelecionado = "Coordenador";
    }//GEN-LAST:event_radCoordenadorActionPerformed

    private void radLimpezaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radLimpezaActionPerformed
        cargoSelecionado = "Limpeza";
    }//GEN-LAST:event_radLimpezaActionPerformed
    //Adicionar Funcionários....
    //De acordo com seu objeto
    private void addFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFuncActionPerformed
       

        String nome = txtNomeFunc.getText();
        String idade = txtIdadeFunc.getText();
        try{

            //ERRO se o usuario digiar algo que n seja numero
        String cpf = txtCpfFunc.getText();
        double salario = Double.parseDouble(txtSalarioFunc.getText());
        
        addFunc(nome, cpf, idade, salario);
    
       //Atualizador da tabela cursos
        DefaultTableModel modelo = (DefaultTableModel) tabelaFuncionarios.getModel();
        modelo.setNumRows(0);

        for(Funcionario f : funcionarios){
            modelo.addRow(new Object[]{f.getNome(), f.getCpf(), f.getIdade(), f.getCargo(), formatador.format(f.getSalario()), formatador.format(f.bonusSalario(salario))});
            //tabela de disciplinas

        }
        
        }catch(NumberFormatException e){
            //Tratamento
            JOptionPane.showMessageDialog(null, "No campo SALARIO são permitidos somente numeros inteiros!" );
        }
    }//GEN-LAST:event_addFuncActionPerformed
    //Deletar os funcionários
    private void delFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delFuncActionPerformed
      
        int pos = tabelaFuncionarios.getSelectedRow();
        
        
        funcionarios.remove(pos);
        
        DefaultTableModel modelo = (DefaultTableModel) tabelaFuncionarios.getModel();
        modelo.setNumRows(0);
        
        for(Funcionario f : funcionarios){
            double s = f.salario;
            
            modelo.addRow(new Object[]{f.getNome(),f.getCpf() , f.getIdade(), f.getCargo(), formatador.format(f.getSalario()),formatador.format(f.bonusSalario(s))});
            //tabela de disciplinas

        }
    }//GEN-LAST:event_delFuncActionPerformed
    //Atualizar funcionários
    private void attFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attFuncActionPerformed
        int pos = tabelaFuncionarios.getSelectedRow();
        
        try{
        funcionarios.get(pos).setNome(txtNomeFunc.getText());
        funcionarios.get(pos).setCpf(txtCpfFunc.getText());
        funcionarios.get(pos).setIdade(txtIdadeFunc.getText());
        funcionarios.get(pos).setCargo(cargoSelecionado);
        funcionarios.get(pos).setSalario(Double.parseDouble(txtSalarioFunc.getText()));
        
        DefaultTableModel modelo = (DefaultTableModel) tabelaFuncionarios.getModel();
        modelo.setNumRows(0);

        for(Funcionario f : funcionarios){
            double s = f.getSalario();
            
            modelo.addRow(new Object[]{f.getNome(), f.getCpf(), f.getIdade(), f.getCargo(), formatador.format(f.getSalario()), formatador.format(f.bonusSalario(s))});
            //tabela de disciplinas

        }
        
        }catch(NumberFormatException e){
            //Tratamento
            JOptionPane.showMessageDialog(null, "No campo SALARIO são permitidos somente numeros inteiros!");
        }
        
        
    }//GEN-LAST:event_attFuncActionPerformed

    private void menuInfosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInfosActionPerformed
        Sobre telaSobre = new Sobre();
        telaSobre.setVisible(true);
    }//GEN-LAST:event_menuInfosActionPerformed

    private void menuTutorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuTutorialActionPerformed
       Tutorial telaTuto = new Tutorial();
       telaTuto.setVisible(true);
    }//GEN-LAST:event_menuTutorialActionPerformed

    private void menuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuSairActionPerformed
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ExibirCursos;
    private javax.swing.JScrollPane ExibirCursos1;
    private javax.swing.JScrollPane ExibirCursos2;
    private javax.swing.JScrollPane ScrollDisc;
    private javax.swing.JScrollPane ScrollDisc1;
    private javax.swing.JButton addAlunos;
    private javax.swing.JButton addCurs;
    private javax.swing.JButton addDisc;
    private javax.swing.JButton addFunc;
    private javax.swing.JButton attAlunos;
    private javax.swing.JButton attCurs;
    private javax.swing.JButton attDisc;
    private javax.swing.JButton attFunc;
    private javax.swing.JButton delAlunos;
    private javax.swing.JButton delCurs;
    private javax.swing.JButton delDisc;
    private javax.swing.JButton delFunc;
    private javax.swing.JInternalFrame internalAlunos;
    private javax.swing.JInternalFrame internalCursos;
    private javax.swing.JInternalFrame internalDisciplinas;
    private javax.swing.JInternalFrame internalFuncionarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem menuInfos;
    private javax.swing.JMenuItem menuSair;
    private javax.swing.JMenuItem menuTutorial;
    private javax.swing.JRadioButton radAdm;
    private javax.swing.JRadioButton radCoordenador;
    private javax.swing.JRadioButton radDiretor;
    private javax.swing.JRadioButton radLimpeza;
    private javax.swing.JRadioButton radProf;
    private javax.swing.JRadioButton radTI;
    private javax.swing.ButtonGroup selectCargo;
    private javax.swing.JTable tabelaAlunos;
    private javax.swing.JTable tabelaCursos;
    private javax.swing.JTable tabelaDisc;
    private javax.swing.JTable tabelaExibirCursos;
    private javax.swing.JTable tabelaExibirCursosEmAlunos;
    private javax.swing.JTable tabelaExibirDisciplinas;
    private javax.swing.JTable tabelaFuncionarios;
    private javax.swing.JTextField txtCpfAluno;
    private javax.swing.JTextField txtCpfFunc;
    private javax.swing.JTextField txtHorarioDisc;
    private javax.swing.JTextField txtIdadeAluno;
    private javax.swing.JTextField txtIdadeFunc;
    private javax.swing.JTextField txtMatriculaAluno;
    private javax.swing.JTextField txtMensalidadeAtt;
    private javax.swing.JTextField txtNomeAluno;
    private javax.swing.JTextField txtNomeCursAtt;
    private javax.swing.JTextField txtNomeDisc;
    private javax.swing.JTextField txtNomeFunc;
    private javax.swing.JTextField txtSalaDisc;
    private javax.swing.JTextField txtSalarioFunc;
    // End of variables declaration//GEN-END:variables
}
